name: Advantech L2-02 AI Container Pipeline

on:
  push:
    branches: [ "main" ]
    paths:
      - 'Dockerfile'
      - 'docker-compose.yml'
      - 'build.sh'
      - 'src/**'
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:  # Allow manual triggering

env:
  HARBOR_REGISTRY: harbor.arfa.wise-paas.com
  HARBOR_PROJECT: advantech-coe-l2-02
  REPOSITORY_NAME: advantech_coe_l2-02
  VERSION_TAG: v2
  LATEST_TAG: latest

jobs:
  validate:
    name: Validate Configuration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Validate docker-compose
        run: |
          pip3 install pyyaml colorama
          python3 -m pip install --upgrade pip
          echo "Validating docker-compose.yml file..."
          python3 - <<EOF
          import yaml
          import sys
          import os
          
          print("Checking docker-compose.yml structure...")
          
          if not os.path.exists('docker-compose.yml'):
              print("❌ docker-compose.yml not found")
              sys.exit(1)
              
          try:
              with open('docker-compose.yml', 'r') as f:
                  compose = yaml.safe_load(f)
                  
              if 'services' not in compose:
                  print("❌ 'services' section missing in docker-compose.yml")
                  sys.exit(1)
                  
              service_name = list(compose['services'].keys())[0]
              service = compose['services'][service_name]
              
              required_fields = ['image', 'container_name', 'privileged', 'runtime']
              for field in required_fields:
                  if field not in service:
                      print(f"❌ '{field}' missing in service configuration")
                      sys.exit(1)
                      
              if service['runtime'] != 'nvidia':
                  print("❌ runtime should be 'nvidia'")
                  sys.exit(1)
                  
              if 'devices' not in service or not service['devices']:
                  print("❌ No devices specified for GPU access")
                  sys.exit(1)
                  
              print("✅ docker-compose.yml validation passed")
              
          except Exception as e:
              print(f"❌ Error validating docker-compose.yml: {str(e)}")
              sys.exit(1)
          EOF

      - name: Validate build script
        run: |
          if [ ! -f "build.sh" ]; then
            echo "❌ build.sh not found"
            exit 1
          fi
          
          if ! grep -q "docker" build.sh; then
            echo "❌ build.sh does not contain docker commands"
            exit 1
          fi
          
          if ! grep -q "XAUTHORITY" build.sh && ! grep -q "xhost" build.sh; then
            echo "⚠️ build.sh may be missing X11 configuration"
          fi
          
          chmod +x build.sh
          echo "✅ build.sh validation passed"

  build:
    name: Build and Push Container
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Harbor Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.HARBOR_REGISTRY }}
          username: ${{ secrets.ApoorvSaxena }}
          password: ${{ secrets.Advantech@2024 }}

      - name: Build and Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.HARBOR_REGISTRY }}/${{ env.HARBOR_PROJECT }}/${{ env.REPOSITORY_NAME }}:${{ env.VERSION_TAG }}
            ${{ env.HARBOR_REGISTRY }}/${{ env.HARBOR_PROJECT }}/${{ env.REPOSITORY_NAME }}:${{ env.LATEST_TAG }}
          cache-from: type=registry,ref=${{ env.HARBOR_REGISTRY }}/${{ env.HARBOR_PROJECT }}/${{ env.REPOSITORY_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.HARBOR_REGISTRY }}/${{ env.HARBOR_PROJECT }}/${{ env.REPOSITORY_NAME }}:buildcache,mode=max

      - name: Update build timestamp
        if: success()
        id: build_info
        run: |
          echo "build_time=$(date -u +'%Y-%m-%dT%H:%M:%SZ')" >> $GITHUB_OUTPUT
          echo "✅ Container image built and pushed successfully at $(date -u +'%Y-%m-%d %H:%M:%S UTC')"
          echo "✅ Image: ${{ env.HARBOR_REGISTRY }}/${{ env.HARBOR_PROJECT }}/${{ env.REPOSITORY_NAME }}:${{ env.VERSION_TAG }}"

  test:
    name: Test Container Image
    runs-on: self-hosted
    needs: build
    # Uses self-hosted runner which has GPU access
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Login to Harbor Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.HARBOR_REGISTRY }}
          username: ${{ secrets.HARBOR_USERNAME }}
          password: ${{ secrets.HARBOR_PASSWORD }}

      - name: Pull Docker image
        run: |
          docker pull ${{ env.HARBOR_REGISTRY }}/${{ env.HARBOR_PROJECT }}/${{ env.REPOSITORY_NAME }}:${{ env.VERSION_TAG }}
          echo "✅ Image pulled successfully"

      - name: Verify container basic functionality
        run: |
          echo "🧪 Testing container functionality..."
          # Create a test script
          cat > test_container.sh << 'EOF'
          #!/bin/bash
          set -e
          
          # Run container with minimal GPU access
          CONTAINER_ID=$(docker run -d --rm \
            --runtime=nvidia \
            --gpus all \
            ${{ env.HARBOR_REGISTRY }}/${{ env.HARBOR_PROJECT }}/${{ env.REPOSITORY_NAME }}:${{ env.VERSION_TAG }} \
            sleep infinity)
          
          echo "Container started with ID: $CONTAINER_ID"
          
          # Test CUDA availability
          echo "Testing CUDA..."
          docker exec $CONTAINER_ID python3 -c "import torch; print(f'CUDA available: {torch.cuda.is_available()}')"
          
          # Test TensorFlow GPU
          echo "Testing TensorFlow..."
          docker exec $CONTAINER_ID python3 -c "import tensorflow as tf; print(f'GPU devices: {tf.config.list_physical_devices(\"GPU\")}')"
          
          # Test OpenCV CUDA
          echo "Testing OpenCV CUDA..."
          docker exec $CONTAINER_ID python3 -c "import cv2; print(f'OpenCV CUDA devices: {cv2.cuda.getCudaEnabledDeviceCount()}')"
          
          # Stop container
          docker stop $CONTAINER_ID
          echo "✅ All tests passed successfully"
          EOF
          
          chmod +x test_container.sh
          ./test_container.sh

      - name: Report test results
        if: always()
        run: |
          if [ $? -eq 0 ]; then
            echo "✅ Container verification completed successfully"
          else
            echo "❌ Container verification failed"
            exit 1
          fi

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Create Release Notes
        run: |
          echo "# Advantech EPC-7300 L2-02 AI Container v${{ env.VERSION_TAG }}" > release_notes.md
          echo "Release Date: $(date +'%Y-%m-%d')" >> release_notes.md
          echo "" >> release_notes.md
          echo "## Container Information" >> release_notes.md
          echo "- Registry: \`${{ env.HARBOR_REGISTRY }}\`" >> release_notes.md
          echo "- Image: \`${{ env.HARBOR_PROJECT }}/${{ env.REPOSITORY_NAME }}:${{ env.VERSION_TAG }}\`" >> release_notes.md
          echo "" >> release_notes.md
          echo "## Pull Command" >> release_notes.md
          echo '```bash' >> release_notes.md
          echo "docker pull ${{ env.HARBOR_REGISTRY }}/${{ env.HARBOR_PROJECT }}/${{ env.REPOSITORY_NAME }}:${{ env.VERSION_TAG }}" >> release_notes.md
          echo '```' >> release_notes.md
          echo "" >> release_notes.md
          echo "## Run Command" >> release_notes.md
          echo '```bash' >> release_notes.md
          echo "./build.sh" >> release_notes.md
          echo '```' >> release_notes.md
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            release_notes.md
          name: v${{ env.VERSION_TAG }}
          tag_name: v${{ env.VERSION_TAG }}
          body_path: release_notes.md
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
